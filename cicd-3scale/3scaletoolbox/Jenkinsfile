#!groovy

library identifier: '3scale-toolbox-jenkins@master', 
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: 'https://github.com/nmasse-itix/3scale-toolbox-jenkins.git'])

def service = null

node() {
  stage('Checkout Source') {
    checkout scm
  }

  stage("Prepare") {

	def envName = params.TEST_PROJECT
	def backendServiceSwaggerEndpoint=params.SWAGGER_FILE_NAME
	def endpoint= params.END_POINT
	def sandbox_endpoint= params.SANDBOX_END_POINT
	def serviceSystemName=params.OPENSHIFT_SERVICE_NAME

    service = toolbox.prepareThreescaleService(
        openapi: [filename: "cicd-3scale/3scaletoolbox/openapi-spec.json"],
        environment: [baseSystemName: toolbox.generateRandomBaseSystemName()],
        toolbox: [openshiftProject: params.DEV_PROJECT, destination: params.TARGET_INSTANCE, secretName: params.SECRET_NAME, insecure: true],
        service: [:],
        applicationPlans: [
          [ systemName: "test", name: "plan1", defaultPlan: true, published: true, costPerMonth:100, setupFee:10, trialPeriodDays:5],
          [ systemName: "silver", name: "Silver", costPerMonth:100, setupFee:10, trialPeriodDays:5],
          [ systemName: "gold", name: "Gold", costPerMonth:100, setupFee:10, trialPeriodDays:5 ],
        ]
    )

    echo "toolbox version = " + service.toolbox.getToolboxVersion()
  }

  stage("Import OpenAPI") {
    service.importOpenAPI()
    echo "Service with system_name ${service.environment.targetSystemName} created !"
  }

  stage("Create an Application Plan") {
    service.applyApplicationPlans()
  }

  stage("Create an Application") {
    def testApplication = [
      name: "my-test-app",
      description: "This is used for tests"
    ]

    def testApplicationCredentials = toolbox.getDefaultApplicationCredentials(service, testApplication.name)
    service.applyApplication(testApplication + testApplicationCredentials)
  }

  stage("Run integration tests") {
    // To run the integration tests when using APIcast SaaS instances, we need
    // to fetch the proxy definition to extract the staging public url
    def proxy = service.readProxy()
    sh '''set -xe
    curl ${proxy.sandbox_endpoint}/beers
    # TODO
    '''
  }

  stage("Promote to production") {
    service.promoteToProduction()
  }

}
