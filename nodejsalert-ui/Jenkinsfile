pipeline {
    agent any 
    parameters{ 
        string (defaultValue: 'notinuse', name:'OPENSHIFT_HOST', description:'open shift cluster url')
        string (defaultValue: 'notinuse', name:'OPENSHIFT_TOKEN', description:'open shift token')
        string (defaultValue: 'docker-registry.default.svc:5000', name:'IMAGE_REGISTRY', description:'open shift token')
        string (defaultValue: 'rh-dev', name:'IMAGE_NAMESPACE', description:'name space where image deployed')
        string (defaultValue: 'rh-dev', name:'DEV_PROJECT', description:'build or development project')
        string (defaultValue: 'rh-test', name:'TEST_PROJECT', description:'Test project')
        string (defaultValue: 'rh-prod', name:'PROD_PROJECT', description:'Production project')
        string (defaultValue: 'https://github.com/RHsyseng/IntegrationApp-Automation.git', name:'GIT_REPO', description:'Git source')
        string (defaultValue: 'master', name:'GIT_BRANCH', description:'Git branch in the source git')
        string (defaultValue: 'rel1.1', name:'SERVICE_VERSION', description:'Service version to be built')
        booleanParam (defaultValue: false, name:'BLUEGREEN_DEPLOYMENT', description:'Deploy Green version to Test/Production (default: normal deployment)')
        booleanParam (defaultValue: false, name:'SELECT_DEPLOY_TO_PROD', description:'Approval to deploy to Production (default: no deployment to production)')
    }
    environment {
        MODULE_NAME = 'nodejsalert-ui'
    }
    stages {
        stage('Build Service nodejsalert-ui') {
            environment {
                srcTag = 'latest'
            }
            when {
              expression {
                  params.SELECT_DEPLOY_TO_PROD == false
              }
            }
            steps {
                echo "Building.. ${MODULE_NAME}"
                node ('nodejs') {
                    git url: params.GIT_REPO, branch: params.GIT_BRANCH 
 
                    script {
                        sh """
                        cd ${MODULE_NAME}

                        oc project ${DEV_PROJECT}

                        npm install && npm run openshift
                        """
                    }
                }
                tagImage(params.IMAGE_NAMESPACE, params.DEV_PROJECT, env.MODULE_NAME, env.srcTag, params.SERVICE_VERSION)
            }
        }
        stage('Pushing Green version to Test') {
            when {
              expression {
                  (params.BLUEGREEN_DEPLOYMENT == true && params.SELECT_DEPLOY_TO_PROD == false)
              }
            }
            environment {
                destTag = 'promoteTest'
            }
            steps {
                echo "Deploy ${MODULE_NAME} Green to ${TEST_PROJECT} "
                tagImage(params.IMAGE_NAMESPACE, params.DEV_PROJECT, env.MODULE_NAME, params.SERVICE_VERSION, env.destTag)
                promoteBlueGreenServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, params.SERVICE_VERSION, params.TEST_PROJECT)    
                promoteService(params.IMAGE_NAMESPACE, params.TEST_PROJECT, env.MODULE_NAME + "-" + params.SERVICE_VERSION)
            }
        }
        stage('Smoke Test') {
            when {
              expression {
                  (params.SELECT_DEPLOY_TO_PROD == false)
              }
            }
            steps {
                script {
                    serviceName = 'nodejsalert-ui'
                    makeGetRequest("http://${serviceName}:8080")
                }
            }
        }
        stage('Pushing to Test') {
            when {
              expression {
                  params.SELECT_DEPLOY_TO_PROD == false
              }
            }
            environment {
                srcTag = 'latest'
                destTag = 'promoteTest'
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${TEST_PROJECT} "
                tagImage(params.IMAGE_NAMESPACE, params.DEV_PROJECT, env.MODULE_NAME, env.srcTag, env.destTag)
                promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.TEST_PROJECT)    
                promoteService(params.IMAGE_NAMESPACE, params.TEST_PROJECT, env.MODULE_NAME)
            }
        }
        stage('Wait for user to select module to push to production.') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == true
                }
            }   
            steps {
                script {
                    try {
                        timeout (time:2, unit:'HOURS') {
                            env.userProdApproval = input(id: 'userInput', message: "Do you approve this build to promote to production?")
                            env.userProdApproval = 'Approved'
                        } 
                    } catch (exception) {
                      env.userProdApproval='---'    
                    }
        
                    println("User approval to production " + env.userProdApproval);
                }
            }
        }
        stage('Pushing to Prod') {
            when {
              expression {
                env.userProdApproval == 'Approved'
              }
            }
            environment {
                srcTag = 'latest'
                destTag = 'promoteProd'
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${PROD_PROJECT} "
                tagImage(params.IMAGE_NAMESPACE, params.DEV_PROJECT, env.MODULE_NAME, env.srcTag, env.destTag)
                promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.PROD_PROJECT)
                promoteService(params.IMAGE_NAMESPACE, params.PROD_PROJECT, env.MODULE_NAME)
            }
        }
        stage('Pushing Green version to Production') {
            when {
              expression {
                  (env.userProdApproval == 'Approved' && params.BLUEGREEN_DEPLOYMENT == true) 
              }
            }
            environment {
                destTag = 'promoteProd'
            }
            steps {
                echo "Deploy ${MODULE_NAME} Green to ${PROD_PROJECT} "
                tagImage(params.IMAGE_NAMESPACE, params.DEV_PROJECT, env.MODULE_NAME, params.SERVICE_VERSION, env.destTag)
                promoteBlueGreenServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, params.SERVICE_VERSION, params.PROD_PROJECT)    
                promoteService(params.IMAGE_NAMESPACE, params.PROD_PROJECT, env.MODULE_NAME + "-" + params.SERVICE_VERSION)
            }
        }
    }
}

def promoteBlueGreenServiceSetup(openShiftHost, openShiftToken, svcName, registry, imageNameSpace, tagName, projName) {

    try{ 
      sh """
          oc delete svc ${svcName}-green -n ${projName} 2> /dev/null
          echo "Finished clean up"
      """
    } catch (Exception e) {
      echo "skip dc/svc/route creation related exception. " + e.getMessage();
    }
    try{ 
      sh """
          oc delete dc ${svcName}-${tagName} -n ${projName} 2> /dev/null
          echo "Finished clean up"
      """
    } catch (Exception e) {
      echo "skip dc/svc/route creation related exception. " + e.getMessage();
    }
    try {
        sh """ 
            oc create dc ${svcName}-${tagName} --image=${registry}/${imageNameSpace}/${svcName}:${tagName} -n ${projName} 2> /dev/null 
            oc set env dc ${svcName}-${tagName} APP_NAME=${svcName} -n ${projName}  2> /dev/null
            oc rollout cancel dc ${svcName}-${tagName} -n ${projName}  2> /dev/null
            oc expose dc ${svcName}-${tagName} --name=${svcName}-green --type=ClusterIP --port=80 --protocol=TCP --target-port=8080 -n ${projName}  2> /dev/null
            echo "Finished creation"
        """
    } catch (Exception e) {
      echo "skip dc/svc/route creation related exception, the resource may already exist. " + e.getMessage();
    }
}
def promoteServiceSetup(openShiftHost, openShiftToken, svcName, registry, imageNameSpace, tagName, projName) {
    try {
        sh """
            oc delete dc ${svcName} -n ${projName} 2> /dev/null
        """
    } catch (Exception e) {
        echo "skip dc/svc/route cleanup related exception, the resource may not exist. " + e.getMessage();
    }
    try {
        sh """ 
            oc create dc ${svcName} --image=${registry}/${imageNameSpace}/${svcName}:${tagName} -n ${projName} 2> /dev/null 
            oc set env dc ${svcName} APP_NAME=${svcName} -n ${projName} 2> /dev/null
            oc rollout cancel dc ${svcName} -n ${projName}  2> /dev/null
            oc expose dc ${svcName} --type=ClusterIP --port=80 --protocol=TCP --target-port=8080 -n ${projName}  2> /dev/null
            oc expose svc ${svcName} --name=${svcName} -n ${projName}  2> /dev/null
        """
    } catch (Exception e) {
      echo "skip dc/svc/route creation related exception, the resource may already exist. " + e.getMessage();
    }
}
def tagImage(imageNamespace, projName, svcName, sourceTag, destinationTag) {
    script {
        openshift.withCluster() {
            openshift.withProject( imageNamespace ) {
                echo "tagging the build for ${MODULE_NAME} ${sourceTag} to ${destinationTag} in ${imageNamespace} "
                openshift.tag("${MODULE_NAME}:${sourceTag}", "${MODULE_NAME}:${destinationTag}")
            }
        }
    }//script
}
def promoteService (imageNamespace, projName, dcName) {
    echo "Deploying service ${projName} to ${dcName}"
    script {
         echo "deploying the ${dcName} to ${projName} "
         openshift.withCluster() {
             openshift.withProject( projName) {
                def dply = openshift.selector("dc", dcName)
                echo "waiting for ... "+ dply.rollout().status()
             }
         }
     }//script
}

def makeGetRequest(url) {

	println('service...'+url);

	def get = new URL(url).openConnection();
	get.setDoOutput(true)

	get.setRequestProperty('Accept', 'application/json')
	
	def responseCode = get.getResponseCode();
	if (responseCode != 200 && responseCode != 201) {
		println('Failed. HTTP response: ' + responseCode)
		println(get.getInputStream().getText());
		assert false
	} else {
		println('Teste successfully!')
	       
	}
}

