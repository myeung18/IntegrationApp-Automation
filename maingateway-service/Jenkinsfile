pipeline {
    agent {
        node {
            label 'maven'
        }
    }
    parameters{ 
        string (defaultValue: 'notinuse', name:'OPENSHIFT_HOST', description:'open shift cluster url')
        string (defaultValue: 'notinuse', name:'OPENSHIFT_TOKEN', description:'open shift token')
        string (defaultValue: 'docker-registry.default.svc:5000', name:'IMAGE_REGISTRY', description:'open shift token')
        string (defaultValue: 'rh-dev', name:'IMAGE_NAMESPACE', description:'name space where image deployed')
        string (defaultValue: 'rh-dev', name:'DEV_PROJECT', description:'build or development project')
        string (defaultValue: 'rh-test', name:'TEST_PROJECT', description:'Test project')
        string (defaultValue: 'rh-prod', name:'PROD_PROJECT', description:'Production project')
        string (defaultValue: 'https://github.com/RHsyseng/IntegrationApp-Automation.git', name:'GIT_REPO', description:'Git source')
        string (defaultValue: 'master', name:'GIT_BRANCH', description:'Git branch in the source git')
        string (defaultValue: 'dbuser', name:'MYSQL_USER', description:'My Sql user name')
        string (defaultValue: 'password', name:'MYSQL_PWD', description:'My Sql user password')
        string (defaultValue: 'service-name:', name:'MODULE_NAME', description:'Module of this build')
    }
    stages {
        stage ('source') {
            steps {
                git url: params.GIT_REPO, branch: params.GIT_BRANCH                
            }
        }
        stage('Build Service') {
            steps {
                echo "Building.. ${MODULE_NAME} "
                build(params.MODULE_NAME)

                echo "Deploying ${MODULE_NAME} to ${DEV_PROJECT}"
                deploy(params.MODULE_NAME, params.DEV_PROJECT, params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN)

            }
        }
        stage('Pushing to Test') {
            environment {
                srcTag = 'latest'
                destTag = 'promoteTest'
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${TEST_PROJECT} "
                promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, params.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.TEST_PROJECT)    
                promoteService(params.IMAGE_NAMESPACE, params.TEST_PROJECT,params.MODULE_NAME, env.srcTag, env.destTag)
            }
        }
        stage('Pushing to Prod') {
            environment {
                srcTag = 'latest'
                destTag = 'promoteProd'
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${PROD_PROJECT} "
                
                promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, params.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.PROD_PROJECT)
                promoteService(params.IMAGE_NAMESPACE, params.PROD_PROJECT, params.MODULE_NAME,  env.srcTag, env.destTag)
            }
        }
    }
}

def promoteServiceSetup(openShiftHost, openShiftToken, svcName, registry, imageNameSpace, tagName, projName) {
    try {
        sh """ 
            oc create dc ${svcName} --image=${registry}/${imageNameSpace}/${svcName}:${tagName} -n ${projName} 2> /dev/null 
            oc deploy ${svcName} --cancel -n ${projName}  2> /dev/null
            oc expose dc ${svcName} --port=8080 -n ${projName}  2> /dev/null
            oc expose svc ${svcName} --name=${svcName} -n ${projName}  2> /dev/null
        """
    } catch (Exception e) {
      echo "skip dc/svc/route creation related exception, the resource may already exist. " + e.getMessage();
    }
}
def promoteService (imageNamespace, projName, svcName, sourceTag, destinationTag) {
    openshiftTag(namespace: imageNamespace,
                  srcStream: svcName,
                  srcTag: sourceTag,
                  destStream: svcName,
                  destTag: destinationTag)

    openshiftDeploy(namespace: projName,
  			     deploymentConfig: svcName,
			     waitTime: '300000')

}

def build(folderName) {
    sh """

    cd ${folderName}
    
    mvn package -Dmaven.test.skip=true 
    """

}
def deploy(folderName, projName, openShiftHost, openShiftToken) {
    sh """
    cd ${folderName}

    oc project ${projName} 

    mvn fabric8:deploy -Dmaven.test.skip=true
    """
}
